{"version":3,"sources":["Util.tsx","Grid.tsx","ImageDisplay.tsx","SquaresGrid.tsx","Target.tsx","Editor.tsx","Controls.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["range","start","end","a","Array","fill","map","i","j","MIX_PIXEL_SIZE","COUNT","Math","ceil","Grid","view","scale","pixelToDisplay","nearestImagePixel","Point","x","key","x1","y1","x2","y2","stroke","y","ImageDisplay","url","transform","point","href","count","SquaresGrid","point1","point2","cellCount","startExtra","endExtra","squareSize","sub","abs","divide","topLeft","min","extra","floor","multiply","isXBorder","isYBorder","Target","position","onMouseDown","screenPosition","add","e","stopPropagation","preventDefault","cursor","width","height","r","this","number","decimals","toFixed","round","View","delta","newScale","Editor","file","setPoint1","setPoint2","useState","setUrl","dragging1","setDragging1","dragging2","setDragging2","pan","setPanning","useEffect","u","URL","createObjectURL","revokeObjectURL","svg","React","createRef","setView","getScreenPosition","current","rect","getBoundingClientRect","clientX","left","clientY","top","stopDrag","className","onWheel","updateScale","deltaY","ref","onMouseMove","containedImagePixel","newPoint","move","onMouseUp","onMouseLeave","undefined","NumberInput","value","onChange","type","parseInt","target","isNaN","Controls","onSelect","setCellCount","setStartExtra","setEndExtra","canvas","outputSize","diff","files","toString","v","onClick","async","outputCellSize","source","sourceSize","outCount","outSize","ctx","getContext","createImageBitmap","bitmap","drawImage","forEach","beginPath","moveTo","lineTo","style","overflow","App","setFile","update","p1","p2","p","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ad32b0bb.chunk.js","sourcesContent":["export function range(start: number, end?: number) {\r\n    const a = end == null ? 0 : start;\r\n    const b = end == null ? start : end;\r\n    return new Array(b - a).fill(0).map((i, j) => j + a);\r\n}\r\n","import React from \"react\";\r\nimport { Point, View } from \"./Editor\";\r\nimport { range } from \"./Util\";\r\n\r\nconst MIX_PIXEL_SIZE = 8;\r\nconst COUNT = Math.ceil(2000 / MIX_PIXEL_SIZE);\r\n\r\nexport function Grid({ view }: { view: View }) {\r\n    if (view.scale < MIX_PIXEL_SIZE) {\r\n        return null;\r\n    }\r\n    const start = view.pixelToDisplay(view.nearestImagePixel(new Point(0, 0)));\r\n    return (\r\n        <g>\r\n            {range(COUNT).map((x, i) => (\r\n                <line\r\n                    key={i}\r\n                    x1={start.x + i * view.scale}\r\n                    y1={0}\r\n                    x2={start.x + i * view.scale}\r\n                    y2={2000}\r\n                    stroke=\"rgb(200,200,200)\"\r\n                />\r\n            ))}\r\n            {range(COUNT).map((x, i) => (\r\n                <line\r\n                    key={i}\r\n                    x1={0}\r\n                    y1={start.y + i * view.scale}\r\n                    x2={2000}\r\n                    y2={start.y + i * view.scale}\r\n                    stroke=\"rgb(200,200,200)\"\r\n                />\r\n            ))}\r\n        </g>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { View } from \"./Editor\";\r\n\r\nexport function ImageDisplay({ view, url }: { view: View; url: string }) {\r\n    return (\r\n        <g transform={`translate(${view.point.x} ${view.point.y})`}>\r\n            <image href={url} transform={`scale(${view.scale})`} />\r\n        </g>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Point, View } from \"./Editor\";\r\nimport { range } from \"./Util\";\r\n\r\nconst count = 100;\r\n\r\nexport function SquaresGrid({\r\n    point1,\r\n    point2,\r\n    view,\r\n    cellCount,\r\n    startExtra,\r\n    endExtra\r\n}: {\r\n    point1: Point;\r\n    point2: Point;\r\n    view: View;\r\n    cellCount: Point;\r\n    startExtra: Point;\r\n    endExtra: Point;\r\n}) {\r\n    const diff = point1.sub(point2).abs();\r\n    const squareSize = diff.divide(cellCount).scale(view.scale);\r\n    const topLeft = view.pixelToDisplay(\r\n        new Point(Math.min(point1.x, point2.x), Math.min(point1.y, point2.y))\r\n    );\r\n    const extra = topLeft.divide(squareSize).floor();\r\n    const start = topLeft.sub(extra.multiply(squareSize));\r\n    function isXBorder(i: number) {\r\n        return (\r\n            i === extra.x + startExtra.x ||\r\n            i === extra.x + endExtra.x + cellCount.x\r\n        );\r\n    }\r\n    function isYBorder(i: number) {\r\n        return (\r\n            i === extra.y + startExtra.y ||\r\n            i === extra.y + endExtra.y + cellCount.y\r\n        );\r\n    }\r\n    return (\r\n        <g>\r\n            {range(count).map(i => (\r\n                <line\r\n                    x1={start.x + i * squareSize.x}\r\n                    x2={start.x + i * squareSize.x}\r\n                    y1={0}\r\n                    y2={2000}\r\n                    stroke={isXBorder(i) ? \"blue\" : \"black\"}\r\n                ></line>\r\n            ))}\r\n            {range(count).map(i => (\r\n                <line\r\n                    x1={0}\r\n                    x2={2000}\r\n                    y1={start.y + i * squareSize.y}\r\n                    y2={start.y + i * squareSize.y}\r\n                    stroke={isYBorder(i) ? \"blue\" : \"black\"}\r\n                ></line>\r\n            ))}\r\n        </g>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Point, View } from \"./Editor\";\r\n\r\nexport function Target({\r\n    position,\r\n    view,\r\n    onMouseDown\r\n}: {\r\n    position: Point;\r\n    view: View;\r\n    onMouseDown: () => void;\r\n}) {\r\n    const screenPosition = view\r\n        .pixelToDisplay(position)\r\n        .add(new Point(view.scale / 2, view.scale / 2));\r\n\r\n    function down(e: React.MouseEvent<SVGGElement>) {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        onMouseDown();\r\n    }\r\n    return (\r\n        <g\r\n            transform={`translate(${screenPosition.x} ${screenPosition.y})`}\r\n            onMouseDown={down}\r\n            cursor=\"move\"\r\n        >\r\n            <rect\r\n                width={view.scale}\r\n                height={view.scale}\r\n                x={-view.scale / 2}\r\n                y={-view.scale / 2}\r\n                stroke=\"rgb(0, 128, 256)\"\r\n                fill=\"none\"\r\n            />\r\n            <circle r=\"30\" stroke=\"rgb(0, 128, 256)\" fill=\"transparent\" />\r\n            <line\r\n                x1=\"-50\"\r\n                y1=\"0\"\r\n                x2=\"50\"\r\n                y2=\"0\"\r\n                stroke=\"rgb(0, 128, 256)\"\r\n                fill=\"none\"\r\n            />\r\n            <line\r\n                x1=\"0\"\r\n                y1=\"-50\"\r\n                x2=\"0\"\r\n                y2=\"50\"\r\n                stroke=\"rgb(0, 128, 256)\"\r\n                fill=\"none\"\r\n            />\r\n        </g>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Grid } from \"./Grid\";\r\nimport { ImageDisplay } from \"./ImageDisplay\";\r\nimport { SquaresGrid } from \"./SquaresGrid\";\r\nimport { Target } from \"./Target\";\r\n\r\nexport class Point {\r\n    constructor(readonly x: number, readonly y: number) {}\r\n\r\n    add(point: Point) {\r\n        return new Point(this.x + point.x, this.y + point.y);\r\n    }\r\n\r\n    sub(point: Point) {\r\n        return new Point(this.x - point.x, this.y - point.y);\r\n    }\r\n\r\n    scale(scale: number) {\r\n        return new Point(this.x * scale, this.y * scale);\r\n    }\r\n\r\n    mod(number: number) {\r\n        return new Point(this.x % number, this.y % number);\r\n    }\r\n\r\n    abs() {\r\n        return new Point(Math.abs(this.x), Math.abs(this.y));\r\n    }\r\n\r\n    multiply(point: Point) {\r\n        return new Point(this.x * point.x, this.y * point.y);\r\n    }\r\n\r\n    divide(point: Point) {\r\n        return new Point(this.x / point.x, this.y / point.y);\r\n    }\r\n\r\n    toString(decimals: number = 2) {\r\n        return `(${this.x.toFixed(decimals)}, ${this.y.toFixed(decimals)})`;\r\n    }\r\n\r\n    floor() {\r\n        return new Point(Math.floor(this.x), Math.floor(this.y));\r\n    }\r\n\r\n    round() {\r\n        return new Point(Math.round(this.x), Math.round(this.y));\r\n    }\r\n}\r\n\r\nexport class View {\r\n    constructor(readonly point: Point, readonly scale: number) {}\r\n\r\n    move(point: Point) {\r\n        return new View(this.point.add(point), this.scale);\r\n    }\r\n\r\n    updateScale(delta: number, point: Point) {\r\n        const newScale = this.scale * (1 - delta / 10);\r\n        return new View(\r\n            this.point\r\n                .sub(point)\r\n                .scale(1 / this.scale)\r\n                .scale(newScale)\r\n                .add(point),\r\n            newScale\r\n        );\r\n    }\r\n\r\n    nearestImagePixel(point: Point) {\r\n        const delta = point.sub(this.point).scale(1 / this.scale);\r\n        return new Point(Math.round(delta.x), Math.round(delta.y));\r\n    }\r\n\r\n    containedImagePixel(point: Point) {\r\n        const delta = point.sub(this.point).scale(1 / this.scale);\r\n        return new Point(Math.floor(delta.x), Math.floor(delta.y));\r\n    }\r\n\r\n    pixelToDisplay(point: Point) {\r\n        return this.point.add(point.scale(this.scale));\r\n    }\r\n}\r\n\r\nexport function Editor({\r\n    file,\r\n    point1,\r\n    setPoint1,\r\n    point2,\r\n    setPoint2,\r\n    cellCount,\r\n    startExtra,\r\n    endExtra\r\n}: {\r\n    file: File | null;\r\n    point1: Point;\r\n    setPoint1: (p: Point) => void;\r\n    point2: Point;\r\n    setPoint2: (p: Point) => void;\r\n    cellCount: Point;\r\n    startExtra: Point;\r\n    endExtra: Point;\r\n}) {\r\n    const [url, setUrl] = useState<string | null>(null);\r\n    const [dragging1, setDragging1] = useState(false);\r\n    const [dragging2, setDragging2] = useState(false);\r\n    const [pan, setPanning] = useState<Point | null>(null);\r\n\r\n    useEffect(() => {\r\n        if (file != null) {\r\n            const u = URL.createObjectURL(file);\r\n            setUrl(u);\r\n            return () => {\r\n                URL.revokeObjectURL(u);\r\n            };\r\n        } else {\r\n            setUrl(null);\r\n        }\r\n    }, [file]);\r\n\r\n    const svg = React.createRef<SVGSVGElement>();\r\n    const [view, setView] = useState(new View(new Point(0, 0), 1));\r\n\r\n    function getScreenPosition(e: React.MouseEvent<any>) {\r\n        if (svg.current == null) {\r\n            return null;\r\n        }\r\n        const rect = svg.current.getBoundingClientRect();\r\n        return new Point(e.clientX - rect.left, e.clientY - rect.top);\r\n    }\r\n\r\n    function onWheel(e: React.WheelEvent<SVGElement>) {\r\n        const position = getScreenPosition(e);\r\n        if (position == null) {\r\n            return;\r\n        }\r\n        setView(view.updateScale(e.deltaY / 100, position));\r\n    }\r\n\r\n    function onMouseMove(e: React.MouseEvent<SVGSVGElement>) {\r\n        if (dragging1) {\r\n            const position = getScreenPosition(e);\r\n            if (position == null) {\r\n                return;\r\n            }\r\n            setPoint1(view.containedImagePixel(position));\r\n        }\r\n        if (dragging2) {\r\n            const position = getScreenPosition(e);\r\n            if (position == null) {\r\n                return;\r\n            }\r\n            setPoint2(view.containedImagePixel(position));\r\n        }\r\n        if (pan) {\r\n            const newPoint = new Point(e.clientX, e.clientY);\r\n            const delta = new Point(e.clientX, e.clientY).sub(pan);\r\n            setView(view.move(delta));\r\n            setPanning(newPoint);\r\n        }\r\n    }\r\n\r\n    function stopDrag() {\r\n        setDragging1(false);\r\n        setDragging2(false);\r\n        setPanning(null);\r\n    }\r\n\r\n    function startPan(e: React.MouseEvent<SVGSVGElement>) {\r\n        setPanning(new Point(e.clientX, e.clientY));\r\n    }\r\n\r\n    return (\r\n        <div className=\"editor\">\r\n            <svg\r\n                className=\"svg\"\r\n                onWheel={onWheel}\r\n                ref={svg}\r\n                onMouseDown={startPan}\r\n                onMouseMove={onMouseMove}\r\n                onMouseUp={stopDrag}\r\n                onMouseLeave={stopDrag}\r\n                cursor={dragging1 || dragging2 ? \"move\" : undefined}\r\n            >\r\n                {url && <ImageDisplay url={url} view={view} />}\r\n                <Grid view={view} />\r\n                <Target\r\n                    position={point1}\r\n                    view={view}\r\n                    onMouseDown={() => setDragging1(true)}\r\n                />\r\n                <Target\r\n                    position={point2}\r\n                    view={view}\r\n                    onMouseDown={() => setDragging2(true)}\r\n                />\r\n                <SquaresGrid\r\n                    point1={point1}\r\n                    point2={point2}\r\n                    view={view}\r\n                    cellCount={cellCount}\r\n                    startExtra={startExtra}\r\n                    endExtra={endExtra}\r\n                />\r\n            </svg>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\nimport { Point } from \"./Editor\";\nimport { range } from \"./Util\";\n\nfunction NumberInput({\n    value,\n    onChange\n}: {\n    value: number;\n    onChange: (e: number) => void;\n}) {\n    return (\n        <input\n            type=\"number\"\n            value={value}\n            onChange={e => {\n                const number = parseInt(e.target.value);\n                if (!isNaN(number)) {\n                    onChange(number);\n                }\n            }}\n        />\n    );\n}\n\nexport function Controls({\n    onSelect,\n    point1,\n    point2,\n    cellCount,\n    setCellCount,\n    file,\n    startExtra,\n    endExtra,\n    setStartExtra,\n    setEndExtra\n}: {\n    onSelect: (file: File) => void;\n    point1: Point;\n    point2: Point;\n    cellCount: Point;\n    setCellCount: (point: Point) => void;\n    file: File | null;\n    startExtra: Point;\n    endExtra: Point;\n    setStartExtra: (e: Point) => void;\n    setEndExtra: (e: Point) => void;\n}) {\n    const ref = React.createRef<HTMLInputElement>();\n\n    function handleSelect() {\n        if (ref.current == null) {\n            return;\n        }\n        const file = ref.current.files && ref.current.files[0];\n        if (!file) {\n            return;\n        }\n        onSelect(file);\n    }\n\n    const canvas = React.createRef<HTMLCanvasElement>();\n\n    function outputSize() {\n        const diff = point1.sub(point2).abs();\n        return new Point(\n            Math.round(diff.x / cellCount.x),\n            Math.round(diff.y / cellCount.y)\n        );\n    }\n\n    async function render() {\n        if (!file || !canvas.current) {\n            return;\n        }\n        const diff = point1.sub(point2).abs();\n        const outputCellSize = outputSize();\n        const scale = diff.divide(cellCount);\n        const source = point1.add(startExtra.multiply(scale));\n        const sourceSize = diff\n            .sub(startExtra.multiply(scale))\n            .add(endExtra.multiply(scale));\n        const outCount = cellCount.sub(startExtra).add(endExtra);\n        const outSize = outCount.multiply(outputCellSize);\n        canvas.current.width = outSize.x;\n        canvas.current.height = outSize.y;\n        const ctx = canvas.current.getContext(\"2d\");\n        if (ctx == null) {\n            return;\n        }\n        const bitmap = await createImageBitmap(file);\n        ctx.drawImage(\n            bitmap,\n            source.x,\n            source.y,\n            sourceSize.x,\n            sourceSize.y,\n            0,\n            0,\n            outSize.x,\n            outSize.y\n        );\n        range(outCount.x * 2).forEach(i => {\n            ctx.beginPath();\n            ctx.moveTo((i * outputCellSize.x) / 2, 0);\n            ctx.lineTo((i * outputCellSize.x) / 2, outSize.y);\n            ctx.stroke();\n        });\n        range(outCount.y * 2).forEach(i => {\n            ctx.beginPath();\n            ctx.moveTo(0, (i * outputCellSize.y) / 2);\n            ctx.lineTo(outSize.x, (i * outputCellSize.y) / 2);\n            ctx.stroke();\n        });\n    }\n\n    return (\n        <div className=\"controls\">\n            <input type=\"file\" ref={ref} onChange={handleSelect} />\n            <div>\n                <p>Point 1: {point1.toString(0)}</p>\n                <p>Point 2: {point2.toString(0)}</p>\n                X:{\" \"}\n                <NumberInput\n                    value={cellCount.x}\n                    onChange={v => setCellCount(new Point(v, cellCount.y))}\n                />\n                Y:{\" \"}\n                <NumberInput\n                    value={cellCount.y}\n                    onChange={v => setCellCount(new Point(cellCount.x, v))}\n                />\n                <p>Output: {outputSize().toString(0)}</p>\n            </div>\n            <div>\n                <div>\n                    Top:\n                    <NumberInput\n                        value={startExtra.y}\n                        onChange={y =>\n                            setStartExtra(new Point(startExtra.x, y))\n                        }\n                    />\n                </div>\n                <div>\n                    Left:\n                    <NumberInput\n                        value={startExtra.x}\n                        onChange={x =>\n                            setStartExtra(new Point(x, startExtra.y))\n                        }\n                    />\n                </div>\n                <div>\n                    Bottom:\n                    <NumberInput\n                        value={endExtra.y}\n                        onChange={y => setEndExtra(new Point(endExtra.x, y))}\n                    />\n                </div>\n                <div>\n                    Right:\n                    <NumberInput\n                        value={endExtra.x}\n                        onChange={x => setEndExtra(new Point(x, endExtra.y))}\n                    />\n                </div>\n            </div>\n            <button onClick={render}>Render</button>\n            <div style={{ width: \"100%\", height: \"500px\", overflow: \"auto\" }}>\n                <canvas ref={canvas} width=\"1000\" height=\"1000\"></canvas>\n            </div>\n        </div>\n    );\n}\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { Controls } from \"./Controls\";\nimport { Editor, Point } from \"./Editor\";\nexport class Bounds {\n    constructor(\n        readonly left: number,\n        readonly right: number,\n        readonly top: number,\n        readonly bottom: number\n    ) {}\n}\n\nfunction App() {\n    const [file, setFile] = useState<null | File>(null);\n    const [point1, setPoint1] = useState(new Point(100, 100));\n    const [point2, setPoint2] = useState(new Point(500, 500));\n    const [cellCount, setCellCount] = useState(new Point(20, 20));\n    const [startExtra, setStartExtra] = useState(new Point(0, 0));\n    const [endExtra, setEndExtra] = useState(new Point(0, 0));\n\n    function update(p1: Point, p2: Point) {\n        const p = p1.sub(p2).abs();\n        setCellCount(new Point(Math.round(p.x / 22), Math.round(p.y / 22)));\n    }\n\n    return (\n        <div className=\"App\">\n            <Editor\n                file={file}\n                point1={point1}\n                point2={point2}\n                setPoint1={p => {\n                    setPoint1(p);\n                    update(p, point2);\n                }}\n                setPoint2={p => {\n                    setPoint2(p);\n                    update(point1, p);\n                }}\n                cellCount={cellCount}\n                startExtra={startExtra}\n                endExtra={endExtra}\n            />\n            <Controls\n                onSelect={setFile}\n                point1={point1}\n                point2={point2}\n                file={file}\n                cellCount={cellCount}\n                setCellCount={setCellCount}\n                startExtra={startExtra}\n                endExtra={endExtra}\n                setStartExtra={setStartExtra}\n                setEndExtra={setEndExtra}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}